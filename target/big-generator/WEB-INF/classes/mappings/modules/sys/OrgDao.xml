<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.it313.big.modules.sys.dao.OrgDao">
	<sql id="orgColumns">
		a.id,
		a.parent_id AS "parent.id",
		a.parent_id AS "parentId",
		p.name AS "parent.name",
		a.area_id AS "area.id",
		a.code,
		a.name,
		a.sort,
		a.type,
		a.simple_name AS "simpleName",
		a.full_name AS "fullName",
		a.address, 
		a.remarks,
		a.create_by AS "createBy.id",
		a.create_time AS "createTime",
		a.update_by AS "updateBy.id",
		a.update_time AS "updateTime",
		a.del_flag AS "delFlag",
		a.left_value AS "leftValue",
		a.right_value AS "rightValue",
		a.layer,
		ar.name AS "area.name",
		a.state
	</sql>
	
	<sql id="orgJoins">
		LEFT JOIN ${@com.it313.big.common.persistence.BaseEntity@BIG_COMMON_TP}.sys_org p ON p.id = a.parent_id
		LEFT JOIN ${@com.it313.big.common.persistence.BaseEntity@BIG_COMMON_TP}.sys_area ar ON ar.id = a.area_id
    </sql>
	
	<select id="get" resultType="Org">
		SELECT
			<include refid="orgColumns"/>
		FROM ${@com.it313.big.common.persistence.BaseEntity@BIG_COMMON_TP}.sys_org a
		<include refid="orgJoins"/>
		WHERE a.id = #{id}
	</select>
	
	<select id="findList" resultType="Org">
		SELECT
			<include refid="orgColumns"/>
		FROM ${@com.it313.big.common.persistence.BaseEntity@BIG_COMMON_TP}.sys_org a
		<include refid="orgJoins"/>
		WHERE a.del_flag = #{DEL_FLAG_NORMAL}
		<if test="leftValue != null and leftValue != ''">
			AND a.left_value &gt;= #{leftValue}
		</if>
		<if test="rightValue != null and rightValue != ''">
			AND a.right_value &lt;= #{rightValue}
		</if>
		<!-- 数据范围过滤 -->
		${sqlMap.dsf}
	</select>
			
	<select id="findAllList" resultType="Org">
		SELECT
			<include refid="orgColumns"/>
		FROM ${@com.it313.big.common.persistence.BaseEntity@BIG_COMMON_TP}.sys_org a
		<include refid="orgJoins"/>
		ORDER BY a.code
	</select>
	
	<select id="findByParentIdsLike" resultType="Org">
		SELECT
			<include refid="orgColumns"/>
		FROM ${@com.it313.big.common.persistence.BaseEntity@BIG_COMMON_TP}.sys_org a
		<include refid="orgJoins"/>
		WHERE a.del_flag = #{DEL_FLAG_NORMAL} 
		ORDER BY a.code
	</select>
	
	<select id="findByParentId" resultType="Org">
		SELECT
			<include refid="orgColumns"/>
		FROM ${@com.it313.big.common.persistence.BaseEntity@BIG_COMMON_TP}.sys_org a
		<include refid="orgJoins"/>
		WHERE a.del_flag = #{DEL_FLAG_NORMAL} AND a.parent_id = #{parentId}
		ORDER BY a.code
	</select>
	
	<insert id="insert">
		INSERT INTO ${@com.it313.big.common.persistence.BaseEntity@BIG_COMMON_TP}.sys_org(
			id, 
			type, 
			parent_id, 
			area_id, 
			code, 
			name, 
			full_name,
			address,
			simple_name,
			sort, 
			left_value,
			right_value,
			layer,
			create_by, 
			create_time, 
			update_by, 
			update_time, 
			remarks, 
			state,
			del_flag
		) VALUES (
			#{id},  
			#{type},
			#{parent.id}, 
			#{area.id}, 
			#{code}, 
			#{name}, 
			#{fullName},
			#{address},
			#{simpleName},
			#{sort}, 
			#{leftValue},
			#{rightValue},
			#{layer},
			#{createBy.id}, 
			#{createTime}, 
			#{updateBy.id}, 
			#{updateTime}, 
			#{remarks}, 
			#{state}, 
			#{delFlag}
		)
	</insert>
	
	<update id="update">
		UPDATE ${@com.it313.big.common.persistence.BaseEntity@BIG_COMMON_TP}.sys_org SET 
			parent_id = #{parent.id}, 
			full_name = #{fullName},
			area_id = #{area.id}, 
			code = #{code}, 
			name = #{name}, 
			type = #{type}, 
			state = #{state}, 
			address = #{address}, 
			update_by = #{updateBy.id}, 
			update_time = #{updateTime}, 
			remarks = #{remarks}
		WHERE id = #{id}
	</update>
	
	<update id="updateParentIds">
		UPDATE ${@com.it313.big.common.persistence.BaseEntity@BIG_COMMON_TP}.sys_org SET 
			parent_id = #{parent.id}, 
			parent_ids = #{parentIds}
		WHERE id = #{id}
	</update>
	<update id="updateFullName" parameterType="java.util.Map">
		UPDATE ${@com.it313.big.common.persistence.BaseEntity@BIG_COMMON_TP}.sys_org SET 
			full_name = #{fullName}
		WHERE id in
        <foreach collection="children" index="index" item="item" open="(" separator="," close=")">    
            #{item.id}    
        </foreach>  
	</update>
	
	<update id="delete">
		UPDATE ${@com.it313.big.common.persistence.BaseEntity@BIG_COMMON_TP}.sys_org SET 
			del_flag = #{DEL_FLAG_DELETE}
		WHERE id = #{id} OR parent_ids LIKE 
					<if test="dbName == 'oracle'">'%,'||#{id}||',%'</if>
					<if test="dbName == 'mysql'">CONCAT('%,', #{id}, ',%')</if>
	</update>
	
	
	<!-- 组织机构树 -->
	<sql id="treeColumns">
		a.id,
		a.parent_id AS "parent.id",
		a.area_id AS "area.id",
		a.code,
		a.name,
		a.sort,
		a.type,
		a.simple_name,
		a.full_name,
		a.address, 
		a.remarks,
		a.create_by AS "createBy.id",
		a.create_time,
		a.update_by AS "updateBy.id",
		a.update_time,
		a.del_flag,
		a.left_value,
		a.right_value,
		a.layer,
		a.state
	</sql>
	<!-- * 查找左兄弟节点
	 * @param idx 若查找左兄弟节点，则为当前节点的左值；否则为当前节点的右值
	 * @param layer 节点所在层次
	 * @return 找到的节点，若找不到，则返回null -->
	<select id="findLeftBrotherTree" resultType="Org">
		SELECT
			<include refid="treeColumns"/>
		FROM ${@com.it313.big.common.persistence.BaseEntity@BIG_COMMON_TP}.sys_org a
		WHERE a.left_value=#{leftValue}-1
		AND A.layer=#{layer}
	</select>
	<!-- * 查找右兄弟节点
	 * @param idx 若查找左兄弟节点，则为当前节点的左值；否则为当前节点的右值
	 * @param layer 节点所在层次
	 * @return 找到的节点，若找不到，则返回null -->
	<select id="findRightBrotherTree" resultType="Org">
		SELECT
			<include refid="treeColumns"/>
		FROM ${@com.it313.big.common.persistence.BaseEntity@BIG_COMMON_TP}.sys_org a
		WHERE a.right_value=#{rightValue}+1
		AND A.layer=#{layer}
	</select>
	<!-- 通过ID找到节点信息 -->
	<select id="findNodeTree" resultType="Org">
		SELECT
			<include refid="treeColumns"/>
		FROM ${@com.it313.big.common.persistence.BaseEntity@BIG_COMMON_TP}.sys_org a
		WHERE a.id=#{id}
	</select>
	<!-- 获取整棵树最大的右值 -->
	<select id="getMaxRightTree" resultType="Integer">
		SELECT
			MAX(a.right_value)
		FROM ${@com.it313.big.common.persistence.BaseEntity@BIG_COMMON_TP}.sys_org a
	</select>
	<!-- 将右边的节点移动几个位置，腾出空间给新元素
	 * @param baseLeft 基准左值
	 * @param baseRight 基准右值
	 * @param step 移动几位 -->
	<update id="shiftRightNodeTree">
		UPDATE ${@com.it313.big.common.persistence.BaseEntity@BIG_COMMON_TP}.sys_org SET 
			left_value = left_value+2*#{step}, 
			right_value = right_value+2*#{step}
		WHERE left_value &gt; #{baseLeft} and right_value &gt; #{baseRight}
	</update>
	<!-- * 调整某个节点的容量,以适应新的大小
	 * @param baseLeft 需要调整的节点的左值
	 * @param baseRight 需要调整的节点的右值
	 * @param n 元素数量 -->
	<update id="resizeTree">
		UPDATE ${@com.it313.big.common.persistence.BaseEntity@BIG_COMMON_TP}.sys_org SET 
			right_value = right_value+2*#{n}
		WHERE left_value &lt;= #{baseLeft} and right_value &gt;=#{baseRight}
	</update>
	 <!--@param node 节点信息
	  @param layerDistance 层次距离
	 @param distance 移动距离  修改单个节点信息 -->
	<update id="shiftTree">
		UPDATE ${@com.it313.big.common.persistence.BaseEntity@BIG_COMMON_TP}.sys_org SET 
			left_value = left_value+#{distance}, 
			right_value = right_value+#{distance},
			layer = layer+#{layerDelta}
		WHERE left_value &gt;= #{node.leftValue} and right_value &lt;=#{node.rightValue}
	</update>
	<!--  删除基准节点,包括所有子节点 -->
	<update id="deleteTree">
		DELETE FROM ${@com.it313.big.common.persistence.BaseEntity@BIG_COMMON_TP}.sys_org  
		WHERE left_value &gt;= #{baseLeft} and right_value &lt;=#{baseRight}
	</update>
</mapper>